"""
M√≥dulo 3: Cria√ß√£o de Entreg√°veis (entregaveis_module.py)

Este m√≥dulo utiliza IA para criar estruturas de produtos digitais de alto valor,
como e-books, checklists, workbooks e sequ√™ncias de e-mail para nutri√ß√£o de leads.
"""

import os
import logging
from typing import Dict, List, Optional
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CriadorEntregaveis:
    """
    Classe principal para cria√ß√£o de entreg√°veis digitais usando IA.
    """
    
    def __init__(self, provider="openai", temperature=0.7):
        """
        Inicializa o criador de entreg√°veis.
        
        Args:
            provider (str): Provedor de IA ("openai" ou "gemini")
            temperature (float): Temperatura para gera√ß√£o (0.0 a 1.0)
        """
        self.provider = provider
        self.temperature = temperature
        self.llm = None
        self._configurar_llm()
    
    def _configurar_llm(self):
        """
        Configura o modelo de linguagem baseado no provedor escolhido.
        """
        try:
            if self.provider == "openai":
                from openai import OpenAI
                api_key = os.getenv("OPENAI_API_KEY")
                if not api_key:
                    raise ValueError("OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
                self.llm = OpenAI(api_key=api_key)
                logger.info("OpenAI configurado com sucesso")
                
            elif self.provider == "gemini":
                import google.generativeai as genai
                api_key = os.getenv("GOOGLE_API_KEY")
                if not api_key:
                    raise ValueError("GOOGLE_API_KEY n√£o encontrada nas vari√°veis de ambiente")
                genai.configure(api_key=api_key)
                self.llm = genai.GenerativeModel('gemini-pro')
                logger.info("Google Gemini configurado com sucesso")
                
            else:
                raise ValueError(f"Provedor '{self.provider}' n√£o suportado")
                
        except Exception as e:
            logger.error(f"Erro ao configurar LLM: {e}")
            raise
    
    def _gerar_resposta(self, prompt: str) -> str:
        """
        Gera resposta usando o modelo configurado.
        
        Args:
            prompt (str): Prompt para o modelo
            
        Returns:
            str: Resposta gerada
        """
        try:
            if self.provider == "openai":
                response = self.llm.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=self.temperature,
                    max_tokens=2000
                )
                return response.choices[0].message.content
                
            elif self.provider == "gemini":
                response = self.llm.generate_content(prompt)
                return response.text
                
        except Exception as e:
            logger.error(f"Erro ao gerar resposta: {e}")
            raise
    
    def gerar_entregavel(self, topico: str, tipo: str, idioma: str = "pt", publico_alvo: str = "") -> str:
        """
        Gera a estrutura completa de um entreg√°vel digital.
        
        Args:
            topico (str): T√≥pico principal do entreg√°vel
            tipo (str): Tipo de entreg√°vel (E-book, Checklist, etc.)
            idioma (str): Idioma do conte√∫do
            publico_alvo (str): Descri√ß√£o do p√∫blico-alvo
            
        Returns:
            str: Estrutura completa do entreg√°vel
        """
        idioma_map = {
            "pt": "Portugu√™s",
            "en": "Ingl√™s",
            "es": "Espanhol",
            "it": "Italiano",
            "de": "Alem√£o",
            "fr": "Franc√™s"
        }
        
        idioma_nome = idioma_map.get(idioma, "Portugu√™s")
        contexto_publico = f"\nP√∫blico-alvo: {publico_alvo}" if publico_alvo else ""
        
        template = f"""
        Voc√™ √© um especialista em cria√ß√£o de produtos digitais de alto valor e marketing de resposta direta. 
        Crie um esbo√ßo detalhado e estruturado para um {tipo} sobre o t√≥pico "{topico}".
        
        **Especifica√ß√µes:**
        - Idioma: {idioma_nome}
        - Tipo: {tipo}
        - T√≥pico: {topico}{contexto_publico}
        
        **Diretrizes para cria√ß√£o:**
        
        1. **Valor Imediato:** O conte√∫do deve fornecer valor pr√°tico e acion√°vel
        2. **Estrutura L√≥gica:** Organize o conte√∫do de forma progressiva e did√°tica
        3. **Aplicabilidade:** Foque em resultados tang√≠veis e implement√°veis
        4. **Engajamento:** Use linguagem envolvente e motivacional
        5. **Completude:** Cubra o t√≥pico de forma abrangente mas focada
        
        **Formato espec√≠fico por tipo:**
        
        **Se for E-book:**
        - Crie cap√≠tulos bem estruturados
        - Inclua introdu√ß√£o, desenvolvimento e conclus√£o
        - Adicione exerc√≠cios pr√°ticos e exemplos
        
        **Se for Checklist:**
        - Liste itens acion√°veis e espec√≠ficos
        - Organize por ordem de prioridade ou sequ√™ncia l√≥gica
        - Inclua crit√©rios de verifica√ß√£o
        
        **Se for Workbook:**
        - Combine teoria com exerc√≠cios pr√°ticos
        - Inclua espa√ßos para anota√ß√µes e reflex√µes
        - Adicione templates e ferramentas
        
        **Se for Script de VSL:**
        - Estruture com hook, problema, solu√ß√£o e CTA
        - Inclua marca√ß√µes de tempo e pausas
        - Adicione instru√ß√µes visuais
        
        **Se for Gabarito:**
        - Forne√ßa respostas detalhadas e explica√ß√µes
        - Inclua crit√©rios de avalia√ß√£o
        - Adicione dicas de melhoria
        
        ---
        
        Gere a resposta com o seguinte formato:
        
        # üìö {tipo.upper()}: [T√çTULO ATRATIVO]
        
        ## üéØ Objetivo
        [Descri√ß√£o clara do que o usu√°rio vai alcan√ßar]
        
        ## üë• Para Quem √â
        [Perfil do p√∫blico-alvo ideal]
        
        ## üìã Estrutura Completa
        
        [Estrutura detalhada com cap√≠tulos/se√ß√µes/itens organizados logicamente]
        
        ## üöÄ Benef√≠cios Principais
        - [Benef√≠cio 1]
        - [Benef√≠cio 2]
        - [Benef√≠cio 3]
        
        ## üí° Dicas de Implementa√ß√£o
        [Orienta√ß√µes pr√°ticas para usar o entreg√°vel]
        
        ## üìà Como Usar Como B√¥nus
        [Estrat√©gias para posicionar este entreg√°vel como b√¥nus de alto valor]
        """
        
        try:
            resposta = self._gerar_resposta(template)
            return resposta
        except Exception as e:
            logger.error(f"Erro ao gerar entreg√°vel: {e}")
            return f"Erro ao processar entreg√°vel: {str(e)}"

# Fun√ß√£o de conveni√™ncia para uso externo (compatibilidade com interface)
def gerar_entregavel(topico: str, tipo: str, idioma: str = "pt", publico_alvo: str = "", provider: str = "openai") -> str:
    """
    Fun√ß√£o simplificada para gerar entreg√°vel.
    """
    try:
        criador = CriadorEntregaveis(provider=provider)
        return criador.gerar_entregavel(topico, tipo, idioma, publico_alvo)
    except Exception as e:
        return f"Erro ao gerar entreg√°vel: {str(e)}"

# Exemplo de uso
if __name__ == "__main__":
    # Teste b√°sico
    try:
        resultado = gerar_entregavel(
            topico="Como criar um neg√≥cio online lucrativo",
            tipo="E-book",
            idioma="pt",
            publico_alvo="empreendedores iniciantes"
        )
        print("Entreg√°vel gerado com sucesso!")
        print(resultado)
    except Exception as e:
        print(f"Erro no teste: {e}")

